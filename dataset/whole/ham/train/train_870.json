{
    "headers": "Return-Path: <fork-admin@xent.com>\nDelivered-To: yyyy@localhost.example.com\nReceived: from localhost (jalapeno [127.0.0.1])\tby jmason.org (Postfix) with ESMTP id E8CAD16F6F\tfor <jm@localhost>; Fri,  6 Sep 2002 11:39:33 +0100 (IST)\nReceived: from jalapeno [127.0.0.1]\tby localhost with IMAP (fetchmail-5.9.0)\tfor jm@localhost (single-drop); Fri, 06 Sep 2002 11:39:33 +0100 (IST)\nReceived: from xent.com ([64.161.22.236]) by dogma.slashnull.org    (8.11.6/8.11.6) with ESMTP id g868XVW25919 for <jm@jmason.org>;    Fri, 6 Sep 2002 09:33:31 +0100\nReceived: from lair.xent.com (localhost [127.0.0.1]) by xent.com (Postfix)    with ESMTP id 429D3294289; Fri,  6 Sep 2002 01:27:05 -0700 (PDT)\nDelivered-To: fork@example.com\nReceived: from panacea.canonical.org (ns1.canonical.org [209.115.72.29])    by xent.com (Postfix) with ESMTP id 7586129427E for <fork@xent.com>;    Fri,  6 Sep 2002 01:26:11 -0700 (PDT)\nReceived: by panacea.canonical.org (Postfix, from userid 1004) id    9369B3F4EB; Fri,  6 Sep 2002 04:26:44 -0400 (EDT)\nFrom: kragen@pobox.com\nTo: fork@example.com\nSubject: Re: asynchronous I/O (was Re: Gasp!)\nMessage-Id: <20020906082644.9369B3F4EB@panacea.canonical.org>\nSender: fork-admin@xent.com\nErrors-To: fork-admin@xent.com\nX-Beenthere: fork@example.com\nX-Mailman-Version: 2.0.11\nPrecedence: bulk\nList-Help: <mailto:fork-request@xent.com?subject=help>\nList-Post: <mailto:fork@example.com>\nList-Subscribe: <http://xent.com/mailman/listinfo/fork>, <mailto:fork-request@xent.com?subject=subscribe>\nList-Id: Friends of Rohit Khare <fork.xent.com>\nList-Unsubscribe: <http://xent.com/mailman/listinfo/fork>,    <mailto:fork-request@xent.com?subject=unsubscribe>\nList-Archive: <http://xent.com/pipermail/fork/>\nDate: Fri, 06 Sep 2002 04:26:44 -0400\nX-Spam-Status: No, hits=-6.2 required=7.0\ttests=AWL,KNOWN_MAILING_LIST,QUOTED_EMAIL_TEXT,\t      SIGNATURE_SHORT_DENSE,SPAM_PHRASE_01_02\tversion=2.50-cvs\nX-Spam-Level: ",
    "subject": "Re: asynchronous I/O (was Re: Gasp!)",
    "body": "Adam Beberg writes:\n> On Tue, 3 Sep 2002, Kragen Sitaker wrote:\n> > Unix acquired nonblocking I/O in the form of select() about 23 years\n> > ago, and Solaris has had the particular aio_* calls we are discussing\n> > for many years.\n> \n> select() \"scaling\" is a joke at best, and I know you know that. poll() is\n> only a bit better.\nNot only do I know that, the post to which you were responding\nexplained that, with somewhat more detail than \"a joke\". As you\nshould know, but evidently don't, poll() isn't even \"a bit better\" ---\nin fact, it's about an order of magnitude worse --- for dense file\ndescriptor sets, which is the normal case. (Except on operating\nsystems where select() isn't a system call but a library routine that\ncalls poll().)\n> > Very few applications need the aio_* calls --- essentially only\n> > high-performance RDBMS servers even benefit from them at all, and\n> > most of those have been faking it fine for a while with multiple\n> > threads or processes. This just provides a modicum of extra\n> > performance.\n> \n> Wrong, it makes a huge difference in even what I consider small programs.\nWhy don't you explain this in more detail?\n> > Although I don't have a copy of the spec handy, I think the aio_* APIs\n> > come from the POSIX spec IEEE Std 1003.1-1990, section 6.7.9, which is\n> > 13 years old, and which I think documented then-current practice.\n> > They might be even older than that.\n> \n> Yes, SGI has a patch to the linux kernel to implement the aio_ interfaces,\n> but it's still not built in, who knows when it will be. The point is it's\n> not portable in either case.\nYou originally said:\n Could it be? After 20 years without this feature UNIX finally\n catches up to Windows and has I/O that doesnt [sic] totally suck for\n nontrivial apps? No way!\nThe point --- my point, the point I was discussing; please don't try\nto tell me you were trying to make a different point, because I don't\ncare --- is that you had no clue what you were talking about; Unix\nhasn't been without this feature, and in fact has had it since you\nwere in elementary school, and operating systems without it don't\n\"totally suck for nontrivial apps\".\nFor what it's worth, glibc has actually implemented the aio_* calls\nfor a while, just in a way that doesn't scale to large numbers of\nconcurrent I/O requests. I find references to the glibc\nimplementation as far back as 1999 and glibc 2.1.1, and I could\nprobably find much earlier references if I had time:\n(more details at\ndetails on the SGI patch are at\n> > Unix has been multiprocess since 1969, and most Unix implementations\n> > have supported multithreading for a decade or more.\n> \n> And most UNIX is still kinda-sorta supporting the pthreads (POSIX)\n> interface, each in their own 7/8 implementation. You're safe if you\n> stick to the basics.\nYour original complaint was that Unix didn't do multithreading or\nmultiprogramming well. Now that I've pointed out how obviously\nidiotic that claim is, you've amended your complaint: now, although\nindividual Unixes do these things well, you complain that their\nimplementations are not entirely conformant with the POSIX threads\nspecification. Well, that's probably true, but I haven't written\npthreads programs in C much myself, so I can't confirm it from my own\nexperience. But, even if it's true, it's not a very good reason to\nprefer Windows.\nI'm sure you can provide examples of bugs in particular threading\nimplementations. Spare us. Just shut up.\n-- \n<kragen@pobox.com> Kragen Sitaker <>\nEdsger Wybe Dijkstra died in August of 2002. The world has lost a great\nman. See and\n for details.\n",
    "urls": [
        "http://sources.redhat.com/ml/libc-hacker/1999-12/msg00070.html",
        "http://www.atnf.csiro.au/people/rgooch/linux/docs/io-events.html;",
        "http://oss.sgi.com/projects/kaio/faq.html)",
        "http://www.pobox.com/~kragen/",
        "http://advogato.org/person/raph/diary.html?start=252",
        "http://www.kode-fu.com/geek/2002_08_04_archive.shtml"
    ]
}